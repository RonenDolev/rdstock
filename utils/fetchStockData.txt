<<<<<<< HEAD
// File: utils/fetchStockData.js
import axios from 'axios';
import { stockList } from '../utils/stockList';

const polygonApiKey = process.env.NEXT_PUBLIC_POLYGON_API_KEY;
=======
import axios from 'axios';

const polygonApiKey = process.env.NEXT_PUBLIC_POLYGON_API_KEY;
const finnhubApiKey = process.env.NEXT_PUBLIC_FINNHUB_API_KEY;
>>>>>>> dc28f1abb29b615d210c0adac97795d3ccef9f63
const baseUrl = 'https://api.polygon.io';

export const fetchRealTimePrice = async (symbol) => {
  try {
<<<<<<< HEAD
    const polygonUrl = `${baseUrl}/v2/last/trade/${symbol}?apiKey=${polygonApiKey}`;
    const res = await fetch(polygonUrl);
    const data = await res.json();
    return data?.results?.p || null;
=======
    if (!symbol || typeof symbol !== 'string' || symbol.trim() === '') {
      console.warn('⚠️ Invalid symbol provided to fetchRealTimePrice:', symbol);
      return null;
    }

    // Try Finnhub first
    const finnhubUrl = `https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${finnhubApiKey}`;
    const finnhubRes = await fetch(finnhubUrl);
    const finnhubData = await finnhubRes.json();

    if (finnhubData?.c && finnhubData.c > 0) {
      return finnhubData.c;
    }

    console.warn(`⚠️ Finnhub failed or returned 0 for ${symbol}. Response:`, finnhubData);

    // Fallback to Polygon.io
    const polygonUrl = `${baseUrl}/v2/last/trade/${symbol}?apiKey=${polygonApiKey}`;
    const polygonRes = await fetch(polygonUrl);
    const polygonData = await polygonRes.json();

    return polygonData?.results?.p || null;
>>>>>>> dc28f1abb29b615d210c0adac97795d3ccef9f63
  } catch (err) {
    console.error('❌ Error fetching real-time price:', err);
    return null;
  }
};

<<<<<<< HEAD
export const getGrowth = async (symbol, months = 6) => {
  try {
    const now = new Date();
    const past = new Date();
    past.setMonth(now.getMonth() - months);

    const from = past.toISOString().split('T')[0];
    const to = now.toISOString().split('T')[0];

    await new Promise(res => setTimeout(res, 250));

    const res = await axios.get(`${baseUrl}/v2/aggs/ticker/${symbol}/range/1/day/${from}/${to}?adjusted=true&sort=asc&limit=5000&apiKey=${polygonApiKey}`);
    const results = res.data.results;
    if (!results || results.length < 2) return null;

    const start = results[0].c;
    const end = results[results.length - 1].c;
    return ((end - start) / start) * 100;
  } catch (err) {
    console.error(`❌ Error fetching ${months}M growth for ${symbol}:`, err?.message || err);
    return null;
=======
export const fetchHistoricalPrice = async (symbol, daysAgo = 180) => {
  const date = new Date();
  date.setDate(date.getDate() - daysAgo);
  const from = date.toISOString().split('T')[0];
  const to = new Date().toISOString().split('T')[0];

  try {
    const url = `${baseUrl}/v2/aggs/ticker/${symbol}/range/1/day/${from}/${to}?adjusted=true&sort=asc&limit=500&apiKey=${polygonApiKey}`;
    const res = await fetch(url);
    const data = await res.json();
    if (data?.results?.length > 0) {
      return data.results[0].o;
    }
    return null;
  } catch (err) {
    console.error('Error fetching historical price:', err);
    return null;
  }
};

export const fetchStockDetails = async (symbol) => {
  try {
    const url = `https://api.polygon.io/vX/reference/financials?ticker=${symbol}&limit=1&apiKey=${polygonApiKey}`;
    const res = await fetch(url);
    const data = await res.json();

    const metrics = data?.results?.[0]?.financials?.metrics;
    return { metrics };
  } catch (err) {
    console.error(`❌ Error fetching fundamentals for ${symbol}:`, err);
    return {};
>>>>>>> dc28f1abb29b615d210c0adac97795d3ccef9f63
  }
};

export const fetchRecentCandles = async (symbol, days = 2) => {
  try {
    const today = new Date();
    const to = today.toISOString().split('T')[0];
    const from = new Date(today.setDate(today.getDate() - days)).toISOString().split('T')[0];
    const url = `${baseUrl}/v2/aggs/ticker/${symbol}/range/1/day/${from}/${to}?adjusted=true&sort=desc&limit=${days}&apiKey=${polygonApiKey}`;

    const res = await fetch(url);
    const data = await res.json();
    return data.results || [];
  } catch (err) {
    console.error('Error fetching recent candles:', err);
    return [];
  }
};

export const detectBullishEngulfing = (candles) => {
  if (!candles || candles.length < 2) return false;
  const [last, prev] = candles.slice(0, 2);
  return (
    prev.o > prev.c &&
    last.o < last.c &&
    last.o < prev.c &&
    last.c > prev.o
  );
};

<<<<<<< HEAD
export const fetchTopStocks = async (stockList) => {
  for (const stock of stockList) {
=======
export const fetchTopStocks = async () => {
>>>>>>> dc28f1abb29b615d210c0adac97795d3ccef9f63
  const results = [];
  const today = new Date();
  const end = today.toISOString().split('T')[0];
  const past = new Date(new Date().setMonth(new Date().getMonth() - 6)).toISOString().split('T')[0];

<<<<<<< HEAD
  for (const stock of stockList.slice(0, 60)) {
=======
  for (const stock of top100) {
>>>>>>> dc28f1abb29b615d210c0adac97795d3ccef9f63
    try {
      const url = `${baseUrl}/v2/aggs/ticker/${stock.symbol}/range/1/day/${past}/${end}?adjusted=true&sort=asc&limit=500&apiKey=${polygonApiKey}`;
      const res = await axios.get(url);
      const data = res.data?.results;

      if (!data || data.length < 2) continue;

      const start = data[0].o;
      const endPrice = data[data.length - 1].c || await fetchRealTimePrice(stock.symbol);
      if (!start || !endPrice) continue;

      const growth = ((endPrice - start) / start) * 100;
<<<<<<< HEAD
      const recommendation = growth > 7 ? 'Buy' : 'Hold';
=======
      const recommendation = growth > 7 && endPrice < (endPrice * 1.15 * 0.95) ? 'Buy' : 'Hold';
>>>>>>> dc28f1abb29b615d210c0adac97795d3ccef9f63

      if (recommendation === 'Buy') {
        results.push({
          symbol: stock.symbol,
          name: stock.name,
          price: endPrice,
          change: growth,
<<<<<<< HEAD
=======
          profit: growth.toFixed(2),
>>>>>>> dc28f1abb29b615d210c0adac97795d3ccef9f63
          recommendation,
        });
      }

<<<<<<< HEAD
      await new Promise(r => setTimeout(r, 200));
    } catch (err) {
      console.warn(`⚠️ Error for ${stock.symbol}:`, err.message);
    }
  }

  return results;
};


export const fetchMarketIndicators = async () => {
  const symbols = [
=======
      await new Promise(r => setTimeout(r, 300));
    } catch (err) {
      console.warn(`⚠️ Error for ${stock.symbol}: ${err.message}`);
    }
  }

  return results.sort((a, b) => b.change - a.change).slice(0, 5);
};

export const fetchMarketIndicators = async () => {
  const indices = [
    { key: 'I:SPX', label: 'S&P 500' },
    { key: 'I:NDX', label: 'Nasdaq 100' },
    { key: 'I:DJI', label: 'Dow Jones' },
    { key: 'I:RUT', label: 'Russell 2000' },
>>>>>>> dc28f1abb29b615d210c0adac97795d3ccef9f63
    { key: 'C:EURUSD', label: 'EUR/USD' },
    { key: 'C:EURILS', label: 'EUR/ILS' },
    { key: 'C:USDILS', label: 'USD/ILS' },
    { key: 'C:XAUUSD', label: 'Gold' },
    { key: 'C:XAGUSD', label: 'Silver' },
<<<<<<< HEAD
    { key: 'I:SPX', label: 'S&P 500' },
    { key: 'I:NDX', label: 'Nasdaq 100' },
    { key: 'I:DJI', label: 'Dow Jones' },
    { key: 'I:RUT', label: 'Russell 2000' }
  ];

  const results = await Promise.all(symbols.map(async ({ key, label }) => {
    try {
      const url = `https://api.polygon.io/v2/aggs/ticker/${key}/prev?adjusted=true&apiKey=${process.env.NEXT_PUBLIC_POLYGON_API_KEY}`;
      const res = await fetch(url);
      const json = await res.json();

      const last = json?.results?.[0]?.c;
      const prev = json?.results?.[0]?.o;
      if (!last || !prev) return null;

      const trend = last > prev ? 'up' : last < prev ? 'down' : 'flat';

      return {
        label,
        value: last.toFixed(2),
        trend
      };
    } catch (err) {
      console.warn(`⚠️ ${label}: No data`, err);
      return null;
    }
  }));

  return results.filter(Boolean);
};
=======
  ];

  const output = [];

  for (const index of indices) {
    try {
      const res = await axios.get(`${baseUrl}/v2/aggs/ticker/${index.key}/prev?adjusted=true&apiKey=${polygonApiKey}`);
      const data = res.data?.results?.[0];

      if (!data) continue;

      const change = data.c - data.o;
      const trend = change > 0 ? 'up' : change < 0 ? 'down' : 'flat';

      output.push({
        label: index.label,
        value: data.c.toFixed(2),
        trend,
      });
    } catch (err) {
      console.warn(`⚠️ Failed to fetch ${index.label}:`, err.message);
    }
  }

  return output;
};

// Include your existing top100 array here
export const top100 = [
  { symbol: 'AAPL', name: 'Apple Inc.' },
  { symbol: 'MSFT', name: 'Microsoft Corp.' },
  { symbol: 'GOOGL', name: 'Alphabet Inc. (Class A)' },
  { symbol: 'AMZN', name: 'Amazon.com Inc.' },
  { symbol: 'META', name: 'Meta Platforms Inc.' },
  { symbol: 'TSLA', name: 'Tesla Inc.' },
  { symbol: 'NVDA', name: 'NVIDIA Corp.' },
  { symbol: 'NFLX', name: 'Netflix Inc.' },
  { symbol: 'ADBE', name: 'Adobe Inc.' },
  { symbol: 'ORCL', name: 'Oracle Corp.' },
  { symbol: 'INTC', name: 'Intel Corp.' },
  { symbol: 'CSCO', name: 'Cisco Systems Inc.' },
  { symbol: 'CRM', name: 'Salesforce, Inc.' },
  { symbol: 'AVGO', name: 'Broadcom Inc.' },
  { symbol: 'AMD', name: 'Advanced Micro Devices Inc.' },
  { symbol: 'TXN', name: 'Texas Instruments Inc.' },
  { symbol: 'QCOM', name: 'QUALCOMM Inc.' },
  { symbol: 'PEP', name: 'PepsiCo, Inc.' },
  { symbol: 'KO', name: 'The Coca-Cola Co.' },
  { symbol: 'WMT', name: 'Walmart Inc.' },
  { symbol: 'COST', name: 'Costco Wholesale Corp.' },
  { symbol: 'HD', name: 'The Home Depot, Inc.' },
  { symbol: 'LOW', name: 'Lowe’s Companies, Inc.' },
  { symbol: 'TGT', name: 'Target Corp.' },
  { symbol: 'MCD', name: 'McDonald’s Corp.' },
  { symbol: 'SBUX', name: 'Starbucks Corp.' },
  { symbol: 'NKE', name: 'NIKE, Inc.' },
  { symbol: 'DIS', name: 'The Walt Disney Co.' },
  { symbol: 'T', name: 'AT&T Inc.' },
  { symbol: 'VZ', name: 'Verizon Communications Inc.' },
  { symbol: 'XOM', name: 'Exxon Mobil Corp.' },
  { symbol: 'CVX', name: 'Chevron Corp.' },
  { symbol: 'JPM', name: 'JPMorgan Chase & Co.' },
  { symbol: 'BAC', name: 'Bank of America Corp.' },
  { symbol: 'GS', name: 'The Goldman Sachs Group, Inc.' },
  { symbol: 'V', name: 'Visa Inc.' },
  { symbol: 'MA', name: 'Mastercard Inc.' },
  { symbol: 'UNH', name: 'UnitedHealth Group Inc.' },
  { symbol: 'JNJ', name: 'Johnson & Johnson' },
  { symbol: 'LLY', name: 'Eli Lilly and Co.' },
  { symbol: 'MRK', name: 'Merck & Co., Inc.' },
  { symbol: 'PFE', name: 'Pfizer Inc.' },
  { symbol: 'TMO', name: 'Thermo Fisher Scientific Inc.' },
  { symbol: 'ABBV', name: 'AbbVie Inc.' },
  { symbol: 'ABT', name: 'Abbott Laboratories' },
  { symbol: 'BMY', name: 'Bristol-Myers Squibb Co.' },
  { symbol: 'GILD', name: 'Gilead Sciences, Inc.' },
  { symbol: 'REGN', name: 'Regeneron Pharmaceuticals, Inc.' },
  { symbol: 'VRTX', name: 'Vertex Pharmaceuticals Inc.' },
  { symbol: 'ISRG', name: 'Intuitive Surgical, Inc.' },
  { symbol: 'ZTS', name: 'Zoetis Inc.' },
  { symbol: 'MDT', name: 'Medtronic plc' },
  { symbol: 'SYK', name: 'Stryker Corp.' },
  { symbol: 'CI', name: 'The Cigna Group' },
  { symbol: 'ELV', name: 'Elevance Health Inc.' },
  { symbol: 'BDX', name: 'Becton, Dickinson and Co.' },
  { symbol: 'ADP', name: 'Automatic Data Processing, Inc.' },
  { symbol: 'INTU', name: 'Intuit Inc.' },
  { symbol: 'NOW', name: 'ServiceNow, Inc.' },
  { symbol: 'PANW', name: 'Palo Alto Networks, Inc.' },
  { symbol: 'SNOW', name: 'Snowflake Inc.' },
  { symbol: 'ZS', name: 'Zscaler, Inc.' },
  { symbol: 'DDOG', name: 'Datadog, Inc.' },
  { symbol: 'MDB', name: 'MongoDB, Inc.' },
  { symbol: 'SHOP', name: 'Shopify Inc.' },
  { symbol: 'UBER', name: 'Uber Technologies, Inc.' },
  { symbol: 'LYFT', name: 'Lyft, Inc.' },
  { symbol: 'ROKU', name: 'Roku, Inc.' },
  { symbol: 'DOCU', name: 'DocuSign, Inc.' },
  { symbol: 'SPOT', name: 'Spotify Technology S.A.' },
  { symbol: 'ETSY', name: 'Etsy, Inc.' },
  { symbol: 'U', name: 'Unity Software Inc.' },
  { symbol: 'PLTR', name: 'Palantir Technologies Inc.' },
  { symbol: 'SQ', name: 'Block, Inc.' },
  { symbol: 'F', name: 'Ford Motor Co.' },
  { symbol: 'GM', name: 'General Motors Co.' }
];
>>>>>>> dc28f1abb29b615d210c0adac97795d3ccef9f63
