import React, { useState, useEffect } from 'react';
import { fetchRealTimePrice, fetchTopStocks } from '../utils/fetchStockData';
const LOCAL_STORAGE_KEY = "investmentTable";

function saveToLocalStorage(data) {
  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));
}

function loadFromLocalStorage() {
  const data = localStorage.getItem(LOCAL_STORAGE_KEY);
  return data ? JSON.parse(data) : [];
}

const stockList = [
 { symbol: 'AAPL', name: 'Apple Inc.' },
  { symbol: 'MSFT', name: 'Microsoft Corp.' },
  { symbol: 'GOOGL', name: 'Alphabet Inc. (Class A)' },
  { symbol: 'AMZN', name: 'Amazon.com Inc.' },
  { symbol: 'META', name: 'Meta Platforms Inc.' },
  { symbol: 'TSLA', name: 'Tesla Inc.' },
  { symbol: 'NVDA', name: 'NVIDIA Corp.' },
  { symbol: 'NFLX', name: 'Netflix Inc.' },
  { symbol: 'ADBE', name: 'Adobe Inc.' },
  { symbol: 'ORCL', name: 'Oracle Corp.' },
  { symbol: 'INTC', name: 'Intel Corp.' },
  { symbol: 'CSCO', name: 'Cisco Systems Inc.' },
  { symbol: 'CRM', name: 'Salesforce, Inc.' },
  { symbol: 'AVGO', name: 'Broadcom Inc.' },
  { symbol: 'AMD', name: 'Advanced Micro Devices Inc.' },
  { symbol: 'TXN', name: 'Texas Instruments Inc.' },
  { symbol: 'QCOM', name: 'QUALCOMM Inc.' },
  { symbol: 'PEP', name: 'PepsiCo, Inc.' },
  { symbol: 'KO', name: 'The Coca-Cola Co.' },
  { symbol: 'WMT', name: 'Walmart Inc.' },
  { symbol: 'COST', name: 'Costco Wholesale Corp.' },
  { symbol: 'HD', name: 'The Home Depot, Inc.' },
  { symbol: 'LOW', name: 'Lowe’s Companies, Inc.' },
  { symbol: 'TGT', name: 'Target Corp.' },
  { symbol: 'MCD', name: 'McDonald’s Corp.' },
  { symbol: 'SBUX', name: 'Starbucks Corp.' },
  { symbol: 'NKE', name: 'NIKE, Inc.' },
  { symbol: 'DIS', name: 'The Walt Disney Co.' },
  { symbol: 'T', name: 'AT&T Inc.' },
  { symbol: 'VZ', name: 'Verizon Communications Inc.' },
  { symbol: 'XOM', name: 'Exxon Mobil Corp.' },
  { symbol: 'CVX', name: 'Chevron Corp.' },
  { symbol: 'JPM', name: 'JPMorgan Chase & Co.' },
  { symbol: 'BAC', name: 'Bank of America Corp.' },
  { symbol: 'GS', name: 'The Goldman Sachs Group, Inc.' },
  { symbol: 'V', name: 'Visa Inc.' },
  { symbol: 'MA', name: 'Mastercard Inc.' },
  { symbol: 'UNH', name: 'UnitedHealth Group Inc.' },
  { symbol: 'JNJ', name: 'Johnson & Johnson' },
  { symbol: 'LLY', name: 'Eli Lilly and Co.' },
  { symbol: 'MRK', name: 'Merck & Co., Inc.' },
  { symbol: 'PFE', name: 'Pfizer Inc.' },
  { symbol: 'TMO', name: 'Thermo Fisher Scientific Inc.' },
  { symbol: 'ABBV', name: 'AbbVie Inc.' },
  { symbol: 'ABT', name: 'Abbott Laboratories' },
  { symbol: 'BMY', name: 'Bristol-Myers Squibb Co.' },
  { symbol: 'GILD', name: 'Gilead Sciences, Inc.' },
  { symbol: 'REGN', name: 'Regeneron Pharmaceuticals, Inc.' },
  { symbol: 'VRTX', name: 'Vertex Pharmaceuticals Inc.' },
  { symbol: 'ISRG', name: 'Intuitive Surgical, Inc.' }
];

const LeftPanel = ({ onStockSelect, setAnalysis }) => {
  const [selectedSymbol, setSelectedSymbol] = useState('AAPL');
  const [amount, setAmount] = useState(100);
  const [portfolio, setPortfolio] = useState([]);
  const [topStocks, setTopStocks] = useState([]);
  const [longTermBuys, setLongTermBuys] = useState([]);

  useEffect(() => {
  onStockSelect(selectedSymbol);
  handleAnalyze(); // Automatically trigger analysis when a new stock is selected
}, [selectedSymbol]);

  useEffect(() => {
    const interval = setInterval(async () => {
      const updated = await Promise.all(
        portfolio.map(async (entry) => {
          const price = await fetchRealTimePrice(entry.symbol);
          const currentValue = price * entry.amount;
          const returnPct = ((currentValue - entry.initialInvestment) / entry.initialInvestment) * 100;
          return {
            ...entry,
            price,
            currentValue,
            returnPct
          };
        })
      );
      setPortfolio(updated);
    }, 60000);
    return () => clearInterval(interval);
  }, [portfolio]);

  useEffect(() => {
    const loadTop = async () => {
      const top = await fetchTopStocks();
      setTopStocks(top);

      const buys = top
        .filter(stock => stock.recommendation === 'Buy')
        .sort((a, b) => b.change - a.change)
        .slice(0, 5);
      setLongTermBuys(buys);
    };
    loadTop();
  }, []);

  const handleBuy = async () => {
    const price = await fetchRealTimePrice(selectedSymbol);
    const existingIndex = portfolio.findIndex(p => p.symbol === selectedSymbol);
    const currentValue = price * amount;

    if (existingIndex !== -1) {
      const updated = [...portfolio];
      updated[existingIndex].amount += amount;
      updated[existingIndex].initialInvestment += amount;
      updated[existingIndex].price = price;
      updated[existingIndex].currentValue = updated[existingIndex].amount * price;
      updated[existingIndex].returnPct = ((updated[existingIndex].currentValue - updated[existingIndex].initialInvestment) / updated[existingIndex].initialInvestment) * 100;
      setPortfolio(updated);
    } else {
      const entry = {
        symbol: selectedSymbol,
        amount,
        initialInvestment: amount,
        price,
        currentValue,
        returnPct: ((currentValue - amount) / amount) * 100,
        timestamp: new Date().toLocaleString(),
        type: 'Buy'
      };
      setPortfolio([...portfolio, entry]);
    }
  };

  const handleSell = async () => {
    const existingIndex = portfolio.findIndex(p => p.symbol === selectedSymbol);
    if (existingIndex !== -1 && portfolio[existingIndex].amount >= amount) {
      const updated = [...portfolio];
      updated[existingIndex].amount -= amount;
      updated[existingIndex].initialInvestment -= amount;
      const price = await fetchRealTimePrice(selectedSymbol);
      updated[existingIndex].price = price;
      updated[existingIndex].currentValue = updated[existingIndex].amount * price;
      updated[existingIndex].returnPct = ((updated[existingIndex].currentValue - updated[existingIndex].initialInvestment) / updated[existingIndex].initialInvestment) * 100;
      setPortfolio(updated);
    }
  };

  const handleAnalyze = async () => {
  const price = await fetchRealTimePrice(selectedSymbol);
  const projectedTarget = price * 1.15;
  const recommendation = price < projectedTarget * 0.95 ? '🟢 Buy Recommended' : '🟠 Hold Recommended';

  if (typeof setAnalysis === 'function') {
    setAnalysis(`Price: $${price.toFixed(2)} | Target: $${projectedTarget.toFixed(2)} → ${recommendation}`);
  }
};


  const handleDelete = (index) => {
    const updated = [...portfolio];
    updated.splice(index, 1);
    setPortfolio(updated);
  };

  const tableStyle = {
    width: '100%',
    fontSize: '12px',
    borderCollapse: 'collapse',
    border: '1px solid #ccc'
  };

  const cellStyle = {
    border: '1px solid #ccc',
    padding: '6px',
    textAlign: 'left'
  };

  const rowStyle = {
    backgroundColor: '#fff'
  };

  return (
    <div style={{ width: '100%', backgroundColor: '#f0f0f0', padding: '20px' }}>
      <h2 style={{ fontFamily: 'Bahnschrift Light', fontSize: '40px', color: 'black' }}>Stock Analysis Tools</h2>

      <label htmlFor="stock-dropdown" style={{ display: 'block', marginTop: '20px', fontSize: '14px' }}>Select Stock</label>
      <select
        id="stock-dropdown"
        value={selectedSymbol}
        onChange={(e) => setSelectedSymbol(e.target.value)}
        style={{ width: '100%', padding: '10px', fontSize: '16px', marginBottom: '20px' }}
      >
        {stockList.map((stock) => (
          <option key={stock.symbol} value={stock.symbol}>{stock.symbol} - {stock.name}</option>
        ))}
      </select>

      <label htmlFor="investment-amount" style={{ display: 'block', fontSize: '14px' }}>Amount of Investment</label>
      <input
        id="investment-amount"
        type="number"
        value={amount}
        onChange={(e) => setAmount(Number(e.target.value))}
        style={{ width: '50%', padding: '8px', fontSize: '16px', marginBottom: '10px' }}
      />

      <div style={{ display: 'flex', gap: '10px', marginBottom: '10px' }}>
        <button style={{ padding: '10px', flex: 1 }} onClick={handleBuy}>Buy</button>
        <button style={{ padding: '10px', flex: 1 }} onClick={handleSell}>Sell</button>
      </div>

      <button onClick={handleAnalyze} style={{ padding: '12px', width: '100%', backgroundColor: '#ccc', border: 'none', fontSize: '16px' }}>
        Analyze
      </button>

      {/* Top 5 Leading Stocks */}
      <div style={{ marginTop: '30px' }}>
        <h4 style={{ fontSize: '16px', marginBottom: '10px' }}>Top 5 Leading Stocks (6-Month Forecast)</h4>
        <table style={tableStyle}>
          <thead>
            <tr style={rowStyle}>
              <th style={cellStyle}>Symbol</th>
              <th style={cellStyle}>Name</th>
              <th style={cellStyle}>Potential Profit</th>
            </tr>
          </thead>
          <tbody>
            {topStocks.map((stock, index) => (
              <tr key={index} style={rowStyle}>
                <td style={cellStyle}>{stock.symbol}</td>
                <td style={cellStyle}>{stock.name}</td>
                <td style={{ ...cellStyle, color: 'green' }}>{stock.profit}%</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Top 5 Long-Term Buy Opportunities */}
      <div style={{ marginTop: '30px' }}>
        <h4 style={{ fontSize: '16px', marginBottom: '10px' }}>Top 5 Long-Term Buy Opportunities</h4>
        <table style={tableStyle}>
          <thead>
            <tr style={rowStyle}>
              <th style={cellStyle}>Symbol</th>
              <th style={cellStyle}>Price</th>
              <th style={cellStyle}>% Change (6M)</th>
              <th style={cellStyle}>Recommendation</th>
            </tr>
          </thead>
          <tbody>
            {longTermBuys.length === 0 ? (
              <tr>
                <td colSpan="4" style={{ padding: '8px', textAlign: 'center', fontStyle: 'italic', color: '#666' }}>
                  No long-term Buy opportunities found at this time.
                </td>
              </tr>
            ) : longTermBuys.map((stock, index) => (
              <tr key={index} style={rowStyle}>
                <td style={cellStyle}>{stock.symbol}</td>
                <td style={cellStyle}>${parseFloat(stock.price).toFixed(2)}</td>
                <td style={{ ...cellStyle, color: 'green' }}>{stock.change.toFixed(2)}%</td>
                <td style={cellStyle}>
                  <span style={{ display: 'inline-flex', alignItems: 'center', gap: '4px' }}>
                    <span style={{ width: '8px', height: '8px', backgroundColor: 'green', borderRadius: '50%' }}></span>
                    <span style={{ fontSize: '12px', color: 'green' }}>Buy</span>
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Investment Table */}
      <div style={{ marginTop: '30px' }}>
        <h4 style={{ fontSize: '16px', marginBottom: '10px' }}>Investment Table</h4>
        <table style={tableStyle}>
          <thead>
            <tr style={rowStyle}>
              <th style={cellStyle}>Time</th>
              <th style={cellStyle}>Type</th>
              <th style={cellStyle}>Stock</th>
              <th style={cellStyle}>Amount</th>
              <th style={cellStyle}>Price</th>
              <th style={cellStyle}>Value</th>
              <th style={cellStyle}>% Change</th>
              <th style={cellStyle}></th>
            </tr>
          </thead>
          <tbody>
            {portfolio.map((entry, index) => (
              <tr key={index} style={rowStyle}>
                <td style={cellStyle}>{entry.timestamp}</td>
                <td style={cellStyle}>{entry.type}</td>
                <td style={cellStyle}>{entry.symbol}</td>
                <td style={cellStyle}>${entry.amount.toFixed(2)}</td>
                <td style={cellStyle}>${entry.price?.toFixed(2)}</td>
                <td style={cellStyle}>${entry.currentValue?.toFixed(2)}</td>
                <td style={{
                  ...cellStyle,
                  color: entry.returnPct > 0 ? 'green' : entry.returnPct < 0 ? 'red' : 'orange'
                }}>
                  {entry.returnPct.toFixed(2)}%
                </td>
                <td style={cellStyle}>
                  <button onClick={() => handleDelete(index)} style={{ fontSize: '10px' }}>🗑️</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default LeftPanel;
