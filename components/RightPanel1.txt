import React, { useEffect, useState } from 'react';
import { fetchStockDetails, fetchRealTimePrice } from '../utils/fetchStockData';
import axios from 'axios';

const RightPanel = ({ selectedStock, analysis }) => {
  const [price, setPrice] = useState(null);
  const [fundamentals, setFundamentals] = useState({});
  const [growth, setGrowth] = useState(null);

  useEffect(() => {
    if (!selectedStock) return;

    const loadData = async () => {
      try {
        const realPrice = await fetchRealTimePrice(selectedStock);
        const details = await fetchStockDetails(selectedStock);
        setPrice(realPrice);
        setFundamentals({
          pe: details?.metrics?.pe_ratio || 'â€”',
          eps: details?.metrics?.eps_growth || 'â€”',
          debt: details?.metrics?.debt_to_equity || 'â€”'
        });

        const apiKey = process.env.NEXT_PUBLIC_POLYGON_API_KEY;
        const baseUrl = 'https://api.polygon.io';
        const today = new Date();
        const end = today.toISOString().split('T')[0];
        const past = new Date(new Date().setMonth(new Date().getMonth() - 6)).toISOString().split('T')[0];

        // Filter out non-US stocks that Polygon does not support in aggs endpoint
        if (!/^[A-Z.]+$/.test(selectedStock)) {
          setGrowth(null);
          return;
        }

        const url = `${baseUrl}/v2/aggs/ticker/${encodeURIComponent(selectedStock)}/range/1/day/${past}/${end}?adjusted=true&sort=asc&limit=500&apiKey=${apiKey}`;
        const res = await axios.get(url);
        const data = res.data?.results;

        if (data && data.length >= 2) {
          const start = data[0]?.o;
          const last = data[data.length - 1]?.c;
          if (start && last) {
            const pct = ((last - start) / start) * 100;
            setGrowth(pct.toFixed(2));
          }
        } else {
          setGrowth(null);
        }
      } catch (error) {
        console.error('Error fetching data:', error);
        setPrice('N/A');
        setFundamentals({ pe: 'N/A', eps: 'N/A', debt: 'N/A' });
        setGrowth(null);
      }
    };

    loadData();
  }, [selectedStock]);

  const getColor = () => {
    if (!analysis) return '#333';
    if (analysis.includes('Buy')) return 'green';
    if (analysis.includes('Hold')) return 'orange';
    if (analysis.includes('Sell')) return 'red';
    return '#333';
  };

  return (
    <div style={{ width: '100%', backgroundColor: '#ffffff', padding: '20px' }}>
      <h2 style={{ fontFamily: 'Bahnschrift Light', fontSize: '30px', marginBottom: '20px' }}>
        Investment Strategy
      </h2>

      <div style={{ fontSize: '14px', lineHeight: '1.6' }}>
        <p><strong>Stock:</strong> {selectedStock || 'â€”'}</p>
        <p><strong>Current Price:</strong> {price !== null ? `$${price}` : 'Loading...'}</p>

        <h3 style={{ fontSize: '18px', marginTop: '20px' }}>Fundamental Analysis</h3>
        <ul style={{ paddingLeft: '20px' }}>
          <li>EPS growth: {fundamentals.eps}</li>
          <li>P/E Ratio: {fundamentals.pe}</li>
          <li>Debt-to-Equity: {fundamentals.debt}</li>
        </ul>

        <h3 style={{ fontSize: '18px', marginTop: '20px' }}>Technical Analysis</h3>
        <ul style={{ paddingLeft: '20px' }}>
          <li>ðŸ”µ Bullish Engulfing + MACD crossover</li>
          <li>ðŸŸ¢ RSI confirmation (low divergence)</li>
          <li>ðŸŸ  Bollinger support near Fibonacci retracement</li>
          {growth !== null && <li>ðŸ“ˆ 6-Month Growth: {growth}%</li>}
        </ul>

        <h3 style={{ fontSize: '18px', marginTop: '20px' }}>Recommendation</h3>
        <p style={{ fontSize: '18px', color: getColor() }}>
          {analysis || 'Run analysis from the left panel'}
        </p>

        <p><strong>Entry Range:</strong> $170 â€“ $175</p>
        <p><strong>Target:</strong> $200</p>
        <p><strong>Stop-Loss:</strong> $162</p>

        <h3 style={{ fontSize: '18px', marginTop: '20px' }}>Risk/Reward</h3>
        <p>Risk: 5% | Reward: 18%</p>
        <p>Ratio: 1:3.6</p>

        <div style={{ fontSize: '12px', marginTop: '20px', color: '#555' }}>
          *Strategy auto-generated based on chart patterns, fundamentals, and AI logic.
        </div>
      </div>
    </div>
  );
};

export default RightPanel;
